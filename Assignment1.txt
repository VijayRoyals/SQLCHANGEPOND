1.Write a SQL statement to create a simple table movies which should include columns movie_id, movie_name, movie_type and movie_rating only if it does not exist. 
The combination of movie_id and movie_name should be an unique indentifier of the table.
command:CREATE TABLE IF NOT EXISTS movies (
    movie_id INT,
    movie_name VARCHAR(255),
    movie_type VARCHAR(100),
    movie_rating DECIMAL(2, 1),
    PRIMARY KEY (movie_id, movie_name)
);
2.Write a SQL statement to create a table company which should include columns company_id, trade, number_of_employees. 
The company_id should be an unique indentifier of the table. trade and number_of_employees columns should not be null. The number_of_employees should be 0 by default.
sqlqueries:CREATE TABLE IF NOT EXISTS company (
    company_id INT PRIMARY KEY,
    trade VARCHAR(255) NOT NULL,
    number_of_employees INT NOT NULL DEFAULT 0
);
3.Write a SQL statement to create a table job_offer which should include columns offer_id, offer_title, offer_min_salary and offer_max_salary, company_id, and make sure that,
 the default value for job_offer_title is blank, offer_min_salary is 5000 and offer_max_salary is null. The offer_id column should be unique. The foreign key company_id can contain only those values which exist in the company table.
sqlqueries: CREATE TABLE IF NOT EXISTS job_offer (
    offer_id INT PRIMARY KEY,
    offer_title VARCHAR(255) NOT NULL DEFAULT '',
    offer_min_salary DECIMAL(10, 2) NOT NULL DEFAULT 5000,
    offer_max_salary DECIMAL(10, 2) DEFAULT NULL,
    company_id INT,
    FOREIGN KEY (company_id) REFERENCES company(company_id)
);
============================================================================================================================================================================================================================================================================================
1. Write a SQL statement to rename the movies table to movies_renamed.
queries:ALTER TABLE movies RENAME TO movies_renamed;
2.Write a SQL statement to add a column movie_director to the movies_renamed table.
queries:
3.Write a SQL statement to add a column ID as a first column of the movies_renamed table.
queries:
4.Write a SQL statement to add a column movie_description after the movie_name column in movies_renamed table.
queries:
5.Write a SQL statement to change the data type of the column movie_rating to integer.
queries:
6.Write a SQL statement to drop the movie_director column.
queries:
7.Write a SQL statement to drop the existing primary key from the movies_renamed table.
queries:
8.Write a SQL statement to add primary key for the column movie_id in the movies_renamed table.
queries:
9.Write a SQL statement to add a foreign key constraint named fk_candidate_id on company_id column referencing to the primary key company_id from the company table.